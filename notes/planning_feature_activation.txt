Recursing:
  Linked:
    on:
      * all child -> on
    off:
      * all child -> off
    partial:
      * TODO - I think I should insist that any array be 100% on or 100% off, so behave like on/off
  Alternate:
    on:
      * first child -> on ; rest child -> off
    off:
      * all child -> off
    partial:
      * TODO - I think I should insist that any array be 100% on or 100% off, so behave like on/off
  Dynamic:
    on:
      * first child -> on ; rest child -> off [SHOULD DISTRIBUTE FROM TOP DOWN]
    off:
      * all child -> off
    partial:
      * TODO - I think I should insist that any array be 100% on or 100% off, so behave like on/off

Siblings:
  Linked:
    on:
      * all sibling -> on
    off:
      * all sibling -> off
    partial:
      * TODO - ?? In theory siblings should go partial as well, but that's too complex ??
  Alternate:
    on:
      * all sibling -> off
    off:
      * nothing to do
    partial:
      * TODO - all sibling -> off
  Dynamic:
    on:
      * TODO - remove points from siblings (starting at the end) if it doesn't fit
    off:
      * TODO - remove points from siblings (starting at the end) if it doesn't fit
    partial:
      * TODO - remove points from siblings (starting at the end) if it doesn't fit

Parent:  if parent is...
  parent on:
    on:
      * nothing to do
    off:
      * nothing to do
    partial:
      * nothing to do
  parent off:
    on:
      * parent -> on
    off:
      * nothing to do
    partial:
      * parent -> on
  parent partial:
    on:
      * TODO - set parent to 100% (arrays are always 0% or 100%)
    off:
      * nothing to do
    partial:
      * TODO - set parent to 100% (arrays are always 0% or 100%)
