Design Notes for MnMSheet

== Tag Policy: ==
  hero-sheet
  environment: [dev | prod]

== The Document Tree: ==

I have several different trees of data, each of which could be expressed
in JSON, which overlap. I am figuring out just how to handle them.

(1) The "character save". This consists of only the fields that the
  user enters. Calculated fields (like costs, or actual number of
  ranks) are not included. This is used for saving (or loading) a
  character.

(2) The "character sheet". This consists of the character save plus
  those fields that are calculated (like costs, or actual number of
  ranks). This is used for rendering to the screen.

 (3) The "current state". This consists of the character sheet plus
   some additional data about temporary effects on the character (like
   statuses, currently-activated-powers, and so forth). This is also
   rendered to the screen if desired, and can be cleared out.

 
Modifiers:
  List of Charge Values:
    flatPoints
    flatPointsPerRankOfModifier
    flatPointsPer5PointsOfFinalCost
    pointsOfMultiplier
    pointsOfMultiplierPerRankOfModifier

Naming:
  For licensing reasons, the terms "Hero Points" and "Power Points" must be renamed; they are
  excluded from the open game license. I'm using "Effort Points" for "Hero Points" and
  "Character Points" for "Power Points".

Proposed Design Policy:
  Some fields are actually entered by users. These fields clearly should appear in the
  JSON charsheet. Some fields (costs are a good example) get calculated. Here I think
  there should be a mix of two policies. For fields that get calculated from something
  that lives at a fixed location, do NOT include the calculated field in the charsheet
  but instead calculate it on demand. However, for fields that get calculated based on
  something that is NOT at a fixed location -- something that might or might not
  exist, we should create a standard place for the field to be placed and then create
  watches to update it. I'll want references to those entries so I'll create IDs for
  the individual powers/abilities/whatever that create these and always list them by
  those IDs.

User and Email:
  Every user has 3 fields: "user", "email" and "password". Password is salted, hashed,
  and the salt and hash are saved. Email is optional, and "" is used if it is not
  present. User can EITHER be the same as a non-empty email OR it can be a different
  value which must not have any @ signs. The way we implement this is to write the
  user info file under the user if there is a user and no email, under the email
  if the user and email are the same, and under BOTH places if the email exists and
  is different from the user.

Stat Ranks:
  Each stat or "Ability" can take on a few different values:
   * A number from -5 to big positive numbers: the character has this rank
   * NaN: a value used to calculate the rank is undefined
   * "lack": the character lacks this ability. This costs -10 points and means
     nothing based on the ability can be done.
   * "construct": the character is a construct who lacks this ability and has
     not chosen to buy back the ability.
  The "entered" field for a stat can ALSO take on similar values:
   * A positive or negative number
   * NaN: for any non-numeric input or errors
   * "lack": means the character lacks this ability
   * "construct" means the character lacks this ability due to being a construct

Active Effects:
  When something in one part of the charsheet alters values in a different part, that's
  an Active Effect. The user is able to view the active effects and suppress applying
  them.

  We have a list of active effects and a set of patterns for describing them. The list
  of active effects supported in the application is (I hope this is complete):
   * initiative
   * jackOfAllTrades
   * defenses.<dodge|fortitude|parry|toughness|will>.ranks
   * abilities.<strength|stamina|agility|dexterity|fighting|intellect|awareness|presence>.ranks
   * skills.skillList@<acrobatics|athletics|deception|insight|intimidation|investigation|perception|persuasion|slight of hand|stealth|technology|treatment|vehicles>
   * attacks.<HSID>.check
   * attacks@close.check
   * attacks@ranged.check

Alerts:
  The alert object has the following fields:
   * message - a short descriptive message
   * lifetime - one of "short", "long", "manual"; controls how long until it is cleared
   * format - one of "error", "info". Defaults to "error". Controls format.
   * hsid - a unique ID for this error

Edit Modes:
  There is an edit mode. It is conceptually managed at the character level, but is actually managed
  at the EntirePage level. It can take on 3 different values:
    DESIGNING
    PLAYING
    READ_ONLY
  When viewing someone else's character it can ONLY take on the value READ_ONLY.

  These control what can be edited.

=== Power Layouts ===
I propose grouping powers into different powerLayouts. These control a few things simultaneously:
 * How we render the power on the screen
 * How we calculate things like the power's cost

The power layouts would include:
 * default -- the default layout used for most standard powers.
 * array   -- used for "Linked", "Dynamic", and "Alternate". Replaces the old "isArray" field
 * senses  -- used for "Senses". Pick certain senses and that determines cost
 * affliction -- used for "Affliction". User specifies which conditions to apply.
 * selection -- used for several powers where the user essentially picks powers off a list.
I'm sure there will be more, but I'm just trying to get started here.

  Specific Layouts:
  === Senses ===
    Accurate Sense           2 <mod>
    Accurate Sense Type      4 <mod for type>
    Acute                    1 <mod>
    Acute Sense Type         2 <mod for type>
    Analytical (if acute)    1 <mod>
    Analytical Sense Type    2 <mod for type>
    Awareness                1 <sense>
    Communication Link       1 <sense>
    Counters Concealment X   2 <mod for type>
    Counters any concealment 5 <mod for type>
    Counters Illusion        2 <mod for type>
    Danger Sense             1 <sense>
    Darkvision               2 <mod for type> [*]
    Detect no range          1 <sense>
    Detect at range          2 <sense>
    Direction Sense          1 <sense>
    Distance Sense           1 <sense>
    Extended                 1 <RANKED mod>
    Infravision              1 <sense>
    Low-Light Vision         1 <sense>
    Microscopic Vision Dust  1 <sense?> <----- FIXME: Should have ranks but doesn't.
    Microscopic Vision Cell  2 <sense?>
    Microscopic Vision DNA   3 <sense?>
    Microscopic Vision Atom  4 <sense?>
    Penetrates Concealment   4 <mod>
    Postcognition            4 <all senses?>
    Precognition             4 <all senses?>
    Radio                    1 <sense - different sense type!>
    Radius                   1 <mod>
    Radius Sense Type        2 <mod for type>
    Ranged                   1 <mod>
    Rapid                    1 <RANKED mod>
    Time Sense               1 <sense - different type?>
    Tracking                 1 <sense>
    Tracking Full Speed      2 <sense>
    Ultra-Hearing            1 <sense?>
    Ultravision              1 <sense?>

    Normal sight: ranged, acute, accurate
    Normal hearing: ranged, acute, radius
    Normal smell/taste: radius
    Normal touch: accurate, radius
    Normal mental: <none>

    Sense Types:
      * Pick Any - {these DON'T inherit the defaults of their sense type}
        * Awareness
        * Communication Link
        * Danger Sense
        * Detect           <----- FIXME: Should have ranks but doesn't.
      * Visual {defaults to ranged, acute, accurate}
        * Normal Sight
        * Infravision
        * Ultravision
        * Microscopic Vision  <----- FIXME: Should have ranks but doesn't.
        * NOT Darkvision -- that's just Penetrates Concealment
      * Auditory {defaults to ranged, acute, radius}
        * Normal Hearing
        * Ultra-Hearing
      * Olfactory {defaults to radius}
        * Normal Smell/Taste
      * Tactile {defaults to accurate, radius}
        * Normal Touch
      * Mental {defaults to nothing}
        * Normal Mental Awareness
      * Radio {defaults to ranged???}
        * Default Radio Sense
      * None of the above
        * Postcognition
        * Precognition
        * Direction Sense
        * Distance Sense
        * Time Sense
    Qualities: (Call them "qualities" instead of "modifiers" to avoid name confusion)
      * Accurate - know exact location; target in combat
      * Acute - fine details
      * Analytical - exact measurements
      * Counters Concealment - ignore one concealment descriptor
      * Counters Illusion - ignores illusion effect
      * Extended {applies to all senses in a sense group} - 10x range per rank
      * Low Light (vision sense type only) {is a vision sense of its own??? I don't agree} <--- WHAT TO DO?
      * Penetrates Concealment - unaffected by obstacles
      * Radius - use sense in all directions
      * Ranged - use at range
      * Rapid - take in information 10x faster per rank
      * Tracking - use to follow a trail

 PLANS:
   So, I'm thinking that I'll have the 6 sense types. Then I'll have a bunch of senses, some of which
   have a default sense type (and come pre-packaged with certain modifier) and others of which do NOT
   come with those modifiers. I'll have a bunch of modifiers that can be applied to a sense. I'll
   automatically charge the higher price if you assign to more than one sense in the sense type. And
   I'll have the weirdos listed under "None of the above" and "all senses" which will be assigned
   separately.


=== Dependencies ===
We don't want circular dependencies in our .js files. Therefore we are declaring a tree-structure for
dependencies which looks like this:

  * api.js
  * heroSheetVersioning.js
    * heroSheetUtil.js
      * updaters.js
  * pdf.js
  * registerStandardComponents.js


=== URLs ===
We might start having URLs that change as you navigate. But if so, how would they look?
  Current:
    hero-sheet/reset-password :: reset password page
    hero-sheet/  :: login and show character
  Proposed:
    hero-sheet/reset-password :: reset password page
    hero-sheet/  :: login and show character
    hero-sheet/u/{user}  :: select character
    hero-sheet/u/{user}/{state}/{character}  :: character (state is one of R/D/P for read-only, design, play)
  However: it may be a while. router for vue.js seems really confusing to me.


=== Design for public characters ===
How about this idea?
 * A user can mark certain characters as "public".
 * A user can "follow" a list of users.
 * If a user follows another user then that user's public characters are
   available to them in read-only format. They can "duplicate" them if
   desired.
 * A user can retrieve a list of all players who have any public
   characters.
  ------------------------------------------
  To support this I would need the following:
   + Characters get a "sharing" section with an "isPublic" boolean (more to come later).
   + The "index.json" file starts listing the "isPublic" field.
   + We provide an API for accessing just the public characters of another user.
   + We allow the API to get a character to work for characters that are public even if
     the user is not the owner. No change to the update API.
   + In the top level of a user, add a new file with the list of what other players they
     can view. For NOW I'll edit this file by hand, but eventually I'll need an API to
     edit it.
   + Add an API to retrieve that file.
   + In the UI we build the ability to render a list of the public characters of the
     other players you can view.
   + In the UI we build the ability to view someone else's character in a read-only mode.
   * Block ALL of the ways to edit a character.


Bug List:

TODO: Some powers (like Invisiblity or Concealment and maybe Morph) don't have
  ranks. I should probably categorize those and hide the rank selector for them.

TODO: I can't enter the modifiers for the extra "Area" because it depends on
  two dimensions (shape and ranks) and I don't have support for that (yet).

TODO: I said that the Impervious advantage used "flatPointsPerRankOfModifier".
  I'm not sure that was correct. But then again, I don't know what else it
  would be.
TODO: The cost of the Impervious says "+1 flat" but it should be +1/rank. Is that
  actually the RIGHT way to do it? I'm not sure.

TODO: The ability "Ultimate Effort" should be specific to a particular skill
  (and can be taken multiple times). Also Improved Critical should apply
  to a particular attack.

TODO: For the power "Communication", the extra "Sense-Dependent" isn't really
  a flaw of the power, it is a flaw of any other power

TODO: Generate a PDF. See http://raw.githack.com/MrRio/jsPDF/master/docs/index.html
  or https://pdfkit.org/.

TODO: [Adran06] Extra sheet for Morph[Metamorph]. And for Summon.

TODO: [Adran06] Maybe an "extra sheet" for variable powers? Listing some options (for free)?

TODO: A few powers really should have their own custom way of being created.
 * Senses - should be able to select the sense itself and its features and
   calculate the cost [DONE]
 * Affliction - should be able to select the affliction and what resists it
   * Three levels (choose for each)
   * Two special extras:
     * Extra "Extra Condition" - each application adds another condition of each level
     * Flaw "Limited Degree" - each level removes a severity
     * Also select "resist by" which is Fortitude, Will. Alternate resistance just affects
       the initial roll, not the recovery.
 + Environment - NOPE, this is normal.
 + Communication - should select the sense that applies and the distance, then it can
   calculate the number of ranks. Really wants to have 2 independent dimensions.
 + Concealment - there's a list of stuff you pick from, then no ranks. (multiple selection nice)
 + Comprehend - there's a list of stuff you pick from, then no ranks. (multiple selection nice)
 + Immunity - there's a list of stuff you pick from, then no ranks. (multiple selection important)
 + Insubstantial - there's a list of stuff you pick from, then no ranks. (multiple selection unimportant)
 + Morph - it's like Insubstantial: Pick some things, then no ranks. (multiple selection unimportant)
 + Movement - there's a list of stuff you pick from, then no ranks  (multiple selection nice)
 + Summon - should be able to specify the creature summoned, and calculate cost from that
 + Variable - Yowzers... how do you specify this?? Maybe provide a list of powers you can
      specify? Up to the number of ranks? Or color it red if it's beyond that?


TODO: Some way to have enhanced traits that apply to other POWERS like Iron Man
  using it to boost his blast. Or that gives you an advantage.

TODO: "Adjustment" and "ActiveEffect" are two names for the same thing. Fix that.

TODO: Along with deleting, it would be kind of nice if there were also a way to re-order
  the items in a list like powers.

BUG: Switch a power from one attack-creating effect type (eg: Weaken) to another (eg: Damage)
  and it will remove the old attack but NOT create the new one. Or maybe that's just the bug
  where things don't update for one cycle.

TODO: Move Object with the Damaging extra should be an attack.

TODO: Custom Modifiers (or at LEAST a generic +1 modifier).

BUG: When you delete or alter a minion or sidekick advantage, it should remove the ally from your charsheet.

BUG: When you add an extra or flaw to an array, it should recalculate the costs of all the items in
  the array. But right now it doesn't.

NOTE: For the power Movement I currently require you to select just one power. Other implementations
  allow you to buy multiple ones. I can still recreate that with "linked", but I should consider
  whether it makes sense to do it more like senses.

TODO: The "Increased Range" extra is really annoying to use. An ideal user interface would be that it
  offers options of "Ranged" and "Perception Range" but only offers the appropriate ones at the
  appropriate cost for the given power.

TODO: The Removable flaw says there's an "indestructable" option on it that I don't support.

TODO: There's no way to buy just imperviousness for your toughness, but that's a thing that players
  often do.

TODO: The ability "Improved Critical" ought to choose an attack just like certain skills do.
