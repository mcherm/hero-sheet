Design Notes for MnMSheet

== Tag Policy: ==
  hero-sheet
  environment: [dev | prod]

== The Document Tree: ==

I have several different trees of data, each of which could be expressed
in JSON, which overlap. I am figuring out just how to handle them.

(1) The "character save". This consists of only the fields that the
  user enters. Calculated fields (like costs, or actual number of
  ranks) are not included. This is used for saving (or loading) a
  character.

(2) The "character sheet". This consists of the character save plus
  those fields that are calculated (like costs, or actual number of
  ranks). This is used for rendering to the screen.

 (3) The "current state". This consists of the character sheet plus
   some additional data about temporary effects on the character (like
   statuses, currently-activated-powers, and so forth). This is also
   rendered to the screen if desired, and can be cleared out.

 
Modifiers:
  List of Charge Values:
    flatPoints
    flatPointsPerRankOfModifier
    flatPointsPer5PointsOfFinalCost
    pointsOfMultiplier
    pointsOfMultiplierPerRankOfModifier

Naming:
  For licensing reasons, the terms "Hero Points" and "Power Points" must be renamed; they are
  excluded from the open game license. I'm using "Effort Points" for "Hero Points" and
  "Character Points" for "Power Points".

Proposed Design Policy:
  Some fields are actually entered by users. These fields clearly should appear in the
  JSON charsheet. Some fields (costs are a good example) get calculated. Here I think
  there should be a mix of two policies. For fields that get calculated from something
  that lives at a fixed location, do NOT include the calculated field in the charsheet
  but instead calculate it on demand. However, for fields that get calculated based on
  something that is NOT at a fixed location -- something that might or might not
  exist, we should create a standard place for the field to be placed and then create
  watches to update it. I'll want references to those entries so I'll create IDs for
  the individual powers/abilities/whatever that create these and always list them by
  those IDs.

User and Email:
  Every user has 3 fields: "user", "email" and "password". Password is salted, hashed,
  and the salt and hash are saved. Email is optional, and "" is used if it is not
  present. User can EITHER be the same as a non-empty email OR it can be a different
  value which must not have any @ signs. The way we implement this is to write the
  user info file under the user if there is a user and no email, under the email
  if the user and email are the same, and under BOTH places if the email exists and
  is different from the user.

Stat Ranks:
  Each stat or "Ability" can take on a few different values:
   * A number from -5 to big positive numbers: the character has this rank
   * NaN: a value used to calculate the rank is undefined
   * "lack": the character lacks this ability. This costs -10 points and means
     nothing based on the ability can be done.
   * "construct": the character is a construct who lacks this ability and has
     not chosen to buy back the ability.
  The "entered" field for a stat can ALSO take on similar values:
   * A positive or negative number
   * NaN: for any non-numeric input or errors
   * "lack": means the character lacks this ability
   * "construct" means the character lacks this ability due to being a construct

Active Effects:
  When something in one part of the charsheet alters values in a different part, that's
  an Active Effect. The user is able to view the active effects and suppress applying
  them.

  We have a list of active effects and a set of patterns for describing them. The list
  of active effects supported in the application is (I hope this is complete):
   * initiative
   * jackOfAllTrades
   * defenses.<dodge|fortitude|parry|toughness|will>.ranks
   * abilities.<strength|stamina|agility|dexterity|fighting|intellect|awareness|presence>.ranks
   * skills.skillList@<acrobatics|athletics|deception|insight|intimidation|investigation|perception|persuasion|slight of hand|stealth|technology|treatment|vehicles>
   * attacks.<HSID>.check
   * attacks@close.check
   * attacks@ranged.check

=== Design for public characters ===
How about this idea?
 * A user can mark certain characters as "public".
 * A user can "follow" a list of users.
 * If a user follows another user then that user's public characters are
   available to them in read-only format. They can "duplicate" them if
   desired.
 * A user can retrieve a list of all players who have any public
   characters.
  ------------------------------------------
  To support this I would need the following:
   + Characters get a "sharing" section with an "isPublic" boolean (more to come later).
   + The "index.json" file starts listing the "isPublic" field.
   + We provide an API for accessing just the public characters of another user.
   + We allow the API to get a character to work for characters that are public even if
     the user is not the owner. No change to the update API.
   + In the top level of a user, add a new file with the list of what other players they
     can view. For NOW I'll edit this file by hand, but eventually I'll need an API to
     edit it.
   + Add an API to retrieve that file.
   + In the UI we build the ability to render a list of the public characters of the
     other players you can view.
   + In the UI we build the ability to view someone else's character in a read-only mode.
   * Block ALL of the ways to edit a character.


Bug List:

TODO: Some powers (like Invisiblity or Concealment and maybe Morph) don't have
  ranks. I should probably categorize those and hide the rank selector for them.

TODO: I can't enter the modifiers for the extra "Area" because it depends on
  two dimensions (shape and ranks) and I don't have support for that (yet).

TODO: I said that the Impervious advantage used "flatPointsPerRankOfModifier".
  I'm not sure that was correct. But then again, I don't know what else it
  would be.

TODO: The ability "Ultimate Effort" should be specific to a particular skill
  (and can be taken multiple times). Also Improved Critical should apply
  to a particular attack.

TODO: For the power "Communication", the extra "Sense-Dependent" isn't really
  a flaw of the power, it is a flaw of any other power

TODO: Generate a PDF. See http://raw.githack.com/MrRio/jsPDF/master/docs/index.html
  or https://pdfkit.org/.

TODO: [Adran06] Extra sheet for Morph[Metamorph]. And for Summon.

TODO: [Adran06] Maybe an "extra sheet" for variable powers? Listing some options (for free)?

TODO: A few powers really should have their own custom way of being created.
 * Variable - should be able to create the power options for it
 * Summon - should be able to create the character for it
 * Senses - should be able to select the sense itself and its features and
   calculate the cost
 * Affliction - should be able to select the affliction and what resists it

TODO: Some enhanced traits, like Power-Lifting, shouldn't be applied to the
  trait.

TODO: When a description is long enough that it wraps, it should wrap and then if
  necessary grow the field so that it is all visible.

TODO: The cost of the Impervious says "+1 flat" but it should be +1/rank. Is that
  actually the RIGHT way to do it? I'm not sure.

TODO: Some way to have enhanced traits that apply to other POWERS like Iron Man
  using it to boost his blast.

TODO: "Adjustment" and "ActiveEffect" are two names for the same thing. Fix that.

TODO: Along with deleting, it would be kind of nice if there were also a way to re-order
  the items in a list like powers.

BUG: Switch a power from one attack-creating effect type (eg: Weaken) to another (eg: Damage)
  and it will remove the old attack but NOT create the new one. Or maybe that's just the bug
  where things don't update for one cycle.

BUG: The Entranced condition should be a level 1 condition in the conditions diagram.

TODO: Move Object with the Damaging extra should be an attack.

TODO: Custom Modifiers (or at LEAST a generic +1 modifier).

TODO: The Defensive Roll advantage should add to Toughness.

TODO: Really need to display error messages.

BUG: When you delete or alter a minion or sidekick advantage, it should remove the ally from your charsheet.
